{"uid":"d5c86720a75890cc","name":"test_edit_another_user_data","fullName":"tests.test_user_edit.TestUserEditNegative#test_edit_another_user_data","historyId":"71a8c4fd7657f2963a45b552d12813e4","time":{"start":1729708870096,"stop":1729708872802,"duration":2706},"description":"Trying to edit another user's data","descriptionHtml":"<p>Trying to edit another user's data</p>\n","status":"failed","statusMessage":"AssertionError: Unexpected status code! Expected: 403. Actual: 400","statusTrace":"self = <tests.test_user_edit.TestUserEditNegative object at 0x7f883baa0680>\n\n    @allure.story(\"Edit another user's profile\")\n    @allure.severity(allure.severity_level.MINOR)\n    @allure.testcase(\"http://test-case/TC-32\", \"TC-32\")\n    @allure.description(\"Trying to edit another user's data\")\n    def test_edit_another_user_data(self):\n        # Step 1: Register the first user\n        first_user_data = self.prepare_registration_data()\n        response_first_user_register = MyRequests.post(\"/user/\",\n                                                       data=first_user_data)  # First User Registration\n        Assertions.assert_code_status(response_first_user_register, 200)\n    \n        # Step 3: Register the Second User\n        second_user_data = self.prepare_registration_data()  # Data generation for the second user\n        response_second_user_register = MyRequests.post(\"/user/\",\n                                                        data=second_user_data)  # Register a Second User\n        Assertions.assert_code_status(response_second_user_register, 200)  # Validate successful Status Code\n    \n        # Extract the Second User ID\n        second_user_id = self.get_json_value(response_second_user_register, \"id\")  # Extracting the Second User ID\n    \n        # Step 4: Log in under the first user\n        login_data = {\n            'email': first_user_data['email'],\n            'password': first_user_data['password']\n        }\n        response_login_first_user = MyRequests.post(\"/user/login\", data=login_data)  # The First User Authorization\n        Assertions.assert_code_status(response_login_first_user, 200)  # Validate successful Status Code\n    \n        # Extract data for authorization (auth_sid and token)\n        auth_sid_first_user = self.get_cookie(response_login_first_user,\n                                              \"auth_sid\")  # Extracting Cookies auth_sid\n        token_first_user = self.get_header(response_login_first_user,\n                                           \"x-csrf-token\")  # Extracting the Header Value x-csrf-token\n    \n        # Attempt to edit the second user data as first user\n        response = MyRequests.put(\n            f\"/user/{second_user_id}\",\n            headers={\"x-csrf-token\": token_first_user},\n            cookies={\"auth_sid\": auth_sid_first_user},\n            data={\"firstName\": \"NewName\"}\n        )\n    \n        # Check that the response code is 403 (Forbidden)\n>       Assertions.assert_code_status(response, 403)\n\ntests/test_user_edit.py:137: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [400]>, expected_status_code = 403\n\n    @staticmethod\n    def assert_code_status(response: Response, expected_status_code):\n        # Defining of a static method in a class. This method will be used to verify the status of the HTTP response.\n        # Method parametrs:\n        # response: the Response object received as a result of the HTTP request.\n        # expected_status_code: expected response code status (such as 200, 404, etc.).\n    \n>       assert response.status_code == expected_status_code, \\\n            f\"Unexpected status code! Expected: {expected_status_code}. Actual: {response.status_code}\"\nE       AssertionError: Unexpected status code! Expected: 403. Actual: 400\n\nlib/assertions.py:97: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"Trying to edit another user's data","status":"failed","statusMessage":"AssertionError: Unexpected status code! Expected: 403. Actual: 400","statusTrace":"self = <tests.test_user_edit.TestUserEditNegative object at 0x7f883baa0680>\n\n    @allure.story(\"Edit another user's profile\")\n    @allure.severity(allure.severity_level.MINOR)\n    @allure.testcase(\"http://test-case/TC-32\", \"TC-32\")\n    @allure.description(\"Trying to edit another user's data\")\n    def test_edit_another_user_data(self):\n        # Step 1: Register the first user\n        first_user_data = self.prepare_registration_data()\n        response_first_user_register = MyRequests.post(\"/user/\",\n                                                       data=first_user_data)  # First User Registration\n        Assertions.assert_code_status(response_first_user_register, 200)\n    \n        # Step 3: Register the Second User\n        second_user_data = self.prepare_registration_data()  # Data generation for the second user\n        response_second_user_register = MyRequests.post(\"/user/\",\n                                                        data=second_user_data)  # Register a Second User\n        Assertions.assert_code_status(response_second_user_register, 200)  # Validate successful Status Code\n    \n        # Extract the Second User ID\n        second_user_id = self.get_json_value(response_second_user_register, \"id\")  # Extracting the Second User ID\n    \n        # Step 4: Log in under the first user\n        login_data = {\n            'email': first_user_data['email'],\n            'password': first_user_data['password']\n        }\n        response_login_first_user = MyRequests.post(\"/user/login\", data=login_data)  # The First User Authorization\n        Assertions.assert_code_status(response_login_first_user, 200)  # Validate successful Status Code\n    \n        # Extract data for authorization (auth_sid and token)\n        auth_sid_first_user = self.get_cookie(response_login_first_user,\n                                              \"auth_sid\")  # Extracting Cookies auth_sid\n        token_first_user = self.get_header(response_login_first_user,\n                                           \"x-csrf-token\")  # Extracting the Header Value x-csrf-token\n    \n        # Attempt to edit the second user data as first user\n        response = MyRequests.put(\n            f\"/user/{second_user_id}\",\n            headers={\"x-csrf-token\": token_first_user},\n            cookies={\"auth_sid\": auth_sid_first_user},\n            data={\"firstName\": \"NewName\"}\n        )\n    \n        # Check that the response code is 403 (Forbidden)\n>       Assertions.assert_code_status(response, 403)\n\ntests/test_user_edit.py:137: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [400]>, expected_status_code = 403\n\n    @staticmethod\n    def assert_code_status(response: Response, expected_status_code):\n        # Defining of a static method in a class. This method will be used to verify the status of the HTTP response.\n        # Method parametrs:\n        # response: the Response object received as a result of the HTTP request.\n        # expected_status_code: expected response code status (such as 200, 404, etc.).\n    \n>       assert response.status_code == expected_status_code, \\\n            f\"Unexpected status code! Expected: {expected_status_code}. Actual: {response.status_code}\"\nE       AssertionError: Unexpected status code! Expected: 403. Actual: 400\n\nlib/assertions.py:97: AssertionError","steps":[{"name":"POSt request to url '/user/'","time":{"start":1729708870096,"stop":1729708870853,"duration":757},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"POSt request to url '/user/'","time":{"start":1729708870853,"stop":1729708871651,"duration":798},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"POSt request to url '/user/login'","time":{"start":1729708871652,"stop":1729708871905,"duration":253},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"PUT request to URL '/user/108177'","time":{"start":1729708871905,"stop":1729708872801,"duration":896},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"attachments":[],"parameters":[],"stepsCount":4,"attachmentStep":false,"hasContent":true,"shouldDisplayMessage":true,"attachmentsCount":0},"afterStages":[],"labels":[{"name":"severity","value":"minor"},{"name":"story","value":"Edit another user's profile"},{"name":"feature","value":"User Profile Editing"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_user_edit"},{"name":"subSuite","value":"TestUserEditNegative"},{"name":"host","value":"3f87d1cc9881"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_user_edit"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"TC-32","url":"http://test-case/TC-32","type":"tms"}],"hidden":false,"retry":false,"extra":{"severity":"minor","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"d5c86720a75890cc.json","parameterValues":[]}