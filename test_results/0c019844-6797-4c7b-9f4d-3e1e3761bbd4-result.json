{"name": "test_edit_another_user_data_check_response_text", "status": "failed", "statusDetails": {"message": "AssertionError: Unexpected response content. Expected: You do not have permission to perform this action, Actual: \nassert '' == 'You do not h...m this action'\n  \n  - You do not have permission to perform this action", "trace": "self = <tests.test_user_edit.TestUserEditNegative object at 0x0000023AA7696660>\n\n    @allure.story(\"Check server response when editing another user's profile\")\n    @allure.severity(allure.severity_level.NORMAL)\n    @allure.testcase(\"http://test-case/TC-33\", \"TC-33\")\n    @allure.description(\"Checking the server response when trying to edit another user's data\")\n    def test_edit_another_user_data_check_response_text(self):\n        # First User Registration\n        # Generate data for the first user\n        first_user_data = self.prepare_registration_data()\n        # Send Request for the first user registration\n        response_first_user_register = MyRequests.post(\"/user/\", data=first_user_data)\n        # Make sure the user is successfully registered (status code 200)\n        Assertions.assert_code_status(response_first_user_register, 200)\n    \n        # First User Registration\n        # Generate data for the first user\n        second_user_data = self.prepare_registration_data()\n        # Send the second user registration request\n        response_second_user_register = MyRequests.post(\"/user/\", data=second_user_data)\n        # Make sure the user is successfully registered (status code 200)\n        Assertions.assert_code_status(response_second_user_register, 200)\n        # Get the ID of the second user from the server response\n        second_user_id = self.get_json_value(response_second_user_register, \"id\")\n    \n        # First User Authorization\n        # Generate login data (first user login and password)\n        login_data = {'email': first_user_data['email'], 'password': first_user_data['password']}\n        # Submit an authorization request\n        response_login_first_user = MyRequests.post(\"/user/login\", data=login_data)\n        # Make sure that the authorization was successful (status code 200)\n        Assertions.assert_code_status(response_login_first_user, 200)\n        # Get cookies and authorization token from server response\n        auth_sid_first_user = self.get_cookie(response_login_first_user, \"auth_sid\")\n        token_first_user = self.get_header(response_login_first_user, \"x-csrf-token\")\n    \n        # Attempt to edit second user data by first user\n        # Send a second user data change request\n        response = MyRequests.put(\n            f\"/user/{second_user_id}\",\n            headers={\"x-csrf-token\": token_first_user},\n            cookies={\"auth_sid\": auth_sid_first_user},\n            data={\"firstName\": \"NewName\"}\n        )\n    \n        # Check Server Response Text\n        # Expected response text if user does not have action permission\n        expected_content = \"You do not have permission to perform this action\"\n        # Verify that the server response text is as expected\n>       assert response.text == expected_content, \\\n            f\"Unexpected response content. Expected: {expected_content}, Actual: {response.text}\"\nE       AssertionError: Unexpected response content. Expected: You do not have permission to perform this action, Actual: \nE       assert '' == 'You do not h...m this action'\nE         \nE         - You do not have permission to perform this action\n\ntests\\test_user_edit.py:187: AssertionError"}, "description": "Checking the server response when trying to edit another user's data", "steps": [{"name": "POSt request to url '/user/'", "status": "passed", "start": 1708617152880, "stop": 1708617155195}, {"name": "POSt request to url '/user/'", "status": "passed", "start": 1708617155195, "stop": 1708617157238}, {"name": "POSt request to url '/user/login'", "status": "passed", "start": 1708617157240, "stop": 1708617158756}, {"name": "PUT request to URL '/user/92620'", "status": "passed", "start": 1708617158756, "stop": 1708617160848}], "start": 1708617152879, "stop": 1708617160854, "uuid": "f818c667-649a-4acc-8324-a0ebcf1358d6", "historyId": "5e7e85972fab890fa424d52c7ecb92cf", "testCaseId": "5e7e85972fab890fa424d52c7ecb92cf", "fullName": "tests.test_user_edit.TestUserEditNegative#test_edit_another_user_data_check_response_text", "labels": [{"name": "story", "value": "Check server response when editing another user's profile"}, {"name": "severity", "value": "normal"}, {"name": "feature", "value": "User Profile Editing"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_user_edit"}, {"name": "subSuite", "value": "TestUserEditNegative"}, {"name": "host", "value": "DESKTOP-Q3QIDPA"}, {"name": "thread", "value": "15380-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_user_edit"}], "links": [{"type": "tms", "url": "http://test-case/TC-33", "name": "TC-33"}]}