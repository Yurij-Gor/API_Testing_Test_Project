{"name": "test_get_another_user_details", "status": "failed", "statusDetails": {"message": "AssertionError: Response shouldn't have keys ['id'], but they are present", "trace": "self = <tests.test_user_get.TestUserGetAnotherUser object at 0x0000023AA7695340>\n\n    @allure.story(\"Get Another User Details\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.issue(\"AUTH-11\", \"http://issue-tracker/AUTH-11\")\n    @allure.testcase(\"TC-11\", \"http://test-case/TC-11\")\n    def test_get_another_user_details(self):\n        # The test is aimed at checking the security and privacy of user data on the system,\n        # Making sure that the user cannot access the sensitive information of other users.\n        # By using the first user’s token and cookies, the test requests the second user’s data.\n        # The Test checks which data about another user can be obtained by being authorized under another account.\n    \n        # Step 1: Register the first user\n        first_user_data = self.prepare_registration_data()  # Generate data for the first user\n        response_first_user_register = MyRequests.post(\"/user/\",\n                                                       data=first_user_data)  # The First User Registration\n        Assertions.assert_code_status(response_first_user_register, 200)  # Validate Successful Status Code\n    \n        # Extract ID and the first username\n        first_user_id = self.get_json_value(response_first_user_register, \"id\")  # The First User ID extraction\n        first_user_username = first_user_data[\"username\"]  # Extracting the first username\n    \n        # Step 3: Register the Second User\n        second_user_data = self.prepare_registration_data()  # Data generation for the second user\n        response_second_user_register = MyRequests.post(\"/user/\",\n                                                        data=second_user_data)  # Register the Second User\n        Assertions.assert_code_status(response_second_user_register, 200)  # Validate Successful Status Code\n    \n        # Step 4: Log in under the first user\n        login_data = {\n            'email': first_user_data['email'],\n            'password': first_user_data['password']\n        }\n        response_login = MyRequests.post(\"/user/login\", data=login_data)  # The First User Authorization\n        Assertions.assert_code_status(response_login, 200)  # Validate Successful Status Code\n    \n        # Extract data for authorization (auth_sid and token)\n        auth_sid = self.get_cookie(response_login, \"auth_sid\")  # Extracting Cookies auth_sid\n        token = self.get_header(response_login, \"x-csrf-token\")  # Extracting the Header Value x-csrf-token\n    \n        # Step 5: Query the second user’s id using token and auth_sid first\n        # user\n        response_get_another_user = MyRequests.get(\n            f\"/user/{first_user_id}\",  # Querying the second user’s ID\n            headers={\"x-csrf-token\": token},  # The First User Token Transfer in Request Header\n            cookies={\"auth_sid\": auth_sid}  # Transfer cookies auth_sid first user\n        )\n    \n        # Step 6: Check that only username (username) data is received\n        expected_fields = [\"username\"]  # Expected fields in response\n        Assertions.assert_json_has_keys(response_get_another_user, expected_fields)  # Check for expected fields\n    \n        # Check if there are no unexplained fields\n        # Unexpected fields in the answer\n        unexpected_fields = [\"id\", \"email\", \"firstName\", \"lastName\", \"password\", \"token\", \"session_id\", \"auth_sid\"]\n>       Assertions.assert_json_has_not_keys(response_get_another_user, unexpected_fields)\n\ntests\\test_user_get.py:102: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse = <Response [200]>, names = ['id', 'email', 'firstName', 'lastName', 'password', 'token', ...]\n\n    @staticmethod\n    def assert_json_has_not_keys(response: Response, names: list):\n        # Create an empty list to store unexpected keys that have been discovered\n        unexpected_keys = []\n        try:\n            # Trying to convert response body into a dictionary\n            response_as_dict = response.json()\n        except json.JSONDecodeError:\n            # In case of error during conversion, display a message and complete the test\n            assert False, f\"Response is not in JSON format. Response text is {response.text}\"\n    \n        # Iterate on all assigned key names\n        for name in names:\n            # Verify that the current key is present in the response\n            if name in response_as_dict:\n                # If a key is found, add it to the list of unexpected keys\n                unexpected_keys.append(name)\n    \n            # Check if any unexpected keys have been found, and if so, drop an exception with information about these keys\n>           assert not unexpected_keys, f\"Response shouldn't have keys {unexpected_keys}, but they are present\"\nE           AssertionError: Response shouldn't have keys ['id'], but they are present\n\nlib\\assertions.py:88: AssertionError"}, "steps": [{"name": "POSt request to url '/user/'", "status": "passed", "start": 1708617177352, "stop": 1708617179363}, {"name": "POSt request to url '/user/'", "status": "passed", "start": 1708617179363, "stop": 1708617181685}, {"name": "POSt request to url '/user/login'", "status": "passed", "start": 1708617181685, "stop": 1708617183229}, {"name": "GET request to URL '/user/92623'", "status": "passed", "start": 1708617183229, "stop": 1708617185515}], "start": 1708617177351, "stop": 1708617185515, "uuid": "00c99ca8-bd23-4333-a80e-2017fe615b92", "historyId": "2f6d146dc407e7f3817d0372daff3696", "testCaseId": "2f6d146dc407e7f3817d0372daff3696", "fullName": "tests.test_user_get.TestUserGetAnotherUser#test_get_another_user_details", "labels": [{"name": "story", "value": "Get Another User Details"}, {"name": "epic", "value": "User Profile"}, {"name": "feature", "value": "User Data Retrieval"}, {"name": "severity", "value": "critical"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_user_get"}, {"name": "subSuite", "value": "TestUserGetAnotherUser"}, {"name": "host", "value": "DESKTOP-Q3QIDPA"}, {"name": "thread", "value": "15380-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_user_get"}], "links": [{"type": "tms", "url": "TC-11", "name": "http://test-case/TC-11"}, {"type": "issue", "url": "AUTH-11", "name": "http://issue-tracker/AUTH-11"}]}