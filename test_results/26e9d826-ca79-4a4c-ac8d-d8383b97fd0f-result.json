{"name": "test_edit_another_user_data", "status": "failed", "statusDetails": {"message": "AssertionError: Unexpected status code! Expected: 403. Actual: 200", "trace": "self = <tests.test_user_edit.TestUserEditNegative object at 0x0000023AA7696540>\n\n    @allure.story(\"Edit another user's profile\")\n    @allure.severity(allure.severity_level.MINOR)\n    @allure.testcase(\"http://test-case/TC-32\", \"TC-32\")\n    @allure.description(\"Trying to edit another user's data\")\n    def test_edit_another_user_data(self):\n        # Step 1: Register the first user\n        first_user_data = self.prepare_registration_data()\n        response_first_user_register = MyRequests.post(\"/user/\",\n                                                       data=first_user_data)  # First User Registration\n        Assertions.assert_code_status(response_first_user_register, 200)\n    \n        # Step 3: Register the Second User\n        second_user_data = self.prepare_registration_data()  # Data generation for the second user\n        response_second_user_register = MyRequests.post(\"/user/\",\n                                                        data=second_user_data)  # Register a Second User\n        Assertions.assert_code_status(response_second_user_register, 200)  # Validate successful Status Code\n    \n        # Extract the Second User ID\n        second_user_id = self.get_json_value(response_second_user_register, \"id\")  # Extracting the Second User ID\n    \n        # Step 4: Log in under the first user\n        login_data = {\n            'email': first_user_data['email'],\n            'password': first_user_data['password']\n        }\n        response_login_first_user = MyRequests.post(\"/user/login\", data=login_data)  # The First User Authorization\n        Assertions.assert_code_status(response_login_first_user, 200)  # Validate successful Status Code\n    \n        # Extract data for authorization (auth_sid and token)\n        auth_sid_first_user = self.get_cookie(response_login_first_user,\n                                              \"auth_sid\")  # Extracting Cookies auth_sid\n        token_first_user = self.get_header(response_login_first_user,\n                                           \"x-csrf-token\")  # Extracting the Header Value x-csrf-token\n    \n        # Attempt to edit the second user data as first user\n        response = MyRequests.put(\n            f\"/user/{second_user_id}\",\n            headers={\"x-csrf-token\": token_first_user},\n            cookies={\"auth_sid\": auth_sid_first_user},\n            data={\"firstName\": \"NewName\"}\n        )\n    \n        # Check that the response code is 403 (Forbidden)\n>       Assertions.assert_code_status(response, 403)\n\ntests\\test_user_edit.py:138: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse = <Response [200]>, expected_status_code = 403\n\n    @staticmethod\n    def assert_code_status(response: Response, expected_status_code):\n        # Defining of a static method in a class. This method will be used to verify the status of the HTTP response.\n        # Method parametrs:\n        # response: the Response object received as a result of the HTTP request.\n        # expected_status_code: expected response code status (such as 200, 404, etc.).\n    \n>       assert response.status_code == expected_status_code, \\\n            f\"Unexpected status code! Expected: {expected_status_code}. Actual: {response.status_code}\"\nE       AssertionError: Unexpected status code! Expected: 403. Actual: 200\n\nlib\\assertions.py:97: AssertionError"}, "description": "Trying to edit another user's data", "steps": [{"name": "POSt request to url '/user/'", "status": "passed", "start": 1708617145431, "stop": 1708617147247}, {"name": "POSt request to url '/user/'", "status": "passed", "start": 1708617147247, "stop": 1708617149141}, {"name": "POSt request to url '/user/login'", "status": "passed", "start": 1708617149141, "stop": 1708617150795}, {"name": "PUT request to URL '/user/92618'", "status": "passed", "start": 1708617150795, "stop": 1708617152859}], "start": 1708617145431, "stop": 1708617152860, "uuid": "77303050-109e-4d52-b7d4-12f2f78bf878", "historyId": "71a8c4fd7657f2963a45b552d12813e4", "testCaseId": "71a8c4fd7657f2963a45b552d12813e4", "fullName": "tests.test_user_edit.TestUserEditNegative#test_edit_another_user_data", "labels": [{"name": "severity", "value": "minor"}, {"name": "feature", "value": "User Profile Editing"}, {"name": "story", "value": "Edit another user's profile"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_user_edit"}, {"name": "subSuite", "value": "TestUserEditNegative"}, {"name": "host", "value": "DESKTOP-Q3QIDPA"}, {"name": "thread", "value": "15380-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_user_edit"}], "links": [{"type": "tms", "url": "http://test-case/TC-32", "name": "TC-32"}]}